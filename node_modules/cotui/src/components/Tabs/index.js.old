import '@webcomponents/webcomponentsjs';
import 'document-register-element';
import './resources/style.scss';
import * as COMMON from 'common';

/*

<ul class="nav nav-tabs" id="myTab" role="tablist">
  <li class="nav-item">
    <a class="nav-link active" id="home-tab" data-toggle="tab" href="#home" role="tab" aria-controls="home" aria-selected="true">Home</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="profile-tab" data-toggle="tab" href="#profile" role="tab" aria-controls="profile" aria-selected="false">Profile</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="contact-tab" data-toggle="tab" href="#contact" role="tab" aria-controls="contact" aria-selected="false">Contact</a>
  </li>
</ul>
<div class="tab-content" id="myTabContent">
  <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">...</div>
  <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="profile-tab">...</div>
  <div class="tab-pane fade" id="contact" role="tabpanel" aria-labelledby="contact-tab">...</div>
</div>


<cotui-tabs cotui 
  id="myTabs" 
  class="" 

  class.content="tab-content"  
  >
  <section class="tab-content" id="myTabContent" active="true" >
      <header 
        class.li="nav-item"
        class.button="nav-link"
      >Riker Ipsum</header>
      
      <article>
      <p>and attack the Romulans. Your head is not an artifact! Our neural pathways have become accustomed to your sensory input patterns. The unexpected is our normal routine. Commander William Riker of the Starship Enterprise. Mr. Worf, you do remember how to fire phasers? Mr. Crusher, ready a collision course with the Borg ship. Fear is the true enemy, the only enemy. Why don't we just give everybody a promotion and call it a night - 'Commander'? Computer, lights up!</p>
      </article>
  </section>
</cotui-tabs>

*/


const Tabs = function({ target, buttonClassName, contentClassName, level, sections}={}){
  this.$el = document.querySelectorAll(target)
  var tab = '';
  const enabled = customElements.get('cotui-tabs')

  this.$el.forEach(el=>{
    if(!enabled){ customElements.define('cotui-tabs', CustomElementTabs) }
      tab = new CustomElementTabs({ buttonClassName, contentClassName, level, sections});
      console.log(tab)
      tab.setAttribute('cotui','')
    
     el.appendChild(tab)
  })

  return {
    id: tab.id,
    $el: tab
  }
}

Tabs.prototype.initCustomElement = () =>{ 
  const enabled = customElements.get('cotui-tabs')
  if(!enabled){
    customElements.define('cotui-tabs', CustomElementTabs) 
  }
}; 



class CustomElementTabs extends HTMLElement {
  constructor( { buttonClassName, contentClassName, sections}={} ) {
    const self = super();
    this._component_id = `${COMMON.utils.generateID()}`;
    this.id = this.id||`js-tabs--${this._component_id}`;
    
    this.btnClass = this.getAttribute('class--button')||buttonClassName||'';
    this.contentClass = this.getAttribute('class--content')||contentClassName||'';
    this.tabData = sections;
    
    this.initElement();
    this.render()    
    return self
  }
    

  initElement(){
    this.setAttribute('role','tablist')
    this.tabButtons = document.createElement('ul')
    this.tabButtons.setAttribute('id',`js-tabs__controls--${this._component_id}`)
    this.tabButtons.setAttribute('class','tabs__controls')
    this.insertAdjacentElement('afterbegin', this.tabButtons);

    this.tabContent = document.createElement('div')
    this.tabContent.setAttribute('id',`js-tabs__content--${this._component_id}`)
    this.tabContent.setAttribute('class','tabs__content')
    this.insertAdjacentElement('beforeend', this.tabContent);
  }

  

  render(){
    let _content = this.GetSectionData(this.tabData||this.querySelectorAll('section'));
    let _btnClass = this.btnClass;
    let _contentClass = this.contentClass;

    var renderTabButtons = function(active,slug,title){
      var html =`
      <li class="tab__item ${active?'active':''}">
        <button
          class="tab__button ${_btnClass}"
          id="js-tab__button--${slug}"
          role="tab"
          aria-controls="js-tab__${slug}"
          aria-selected="${active?'true':'false'}"
          >${title}</button>
      </li>
      `;

      return html;
    };

    var renderTabContent = function(active,slug,body){
      var html =`
      <div
        class="tab__content ${active?'show active':''} ${_contentClass}"
        id="js-tab__${slug}"
        role="tabpanel"
        aria-labelledby="js-tab--${slug}"
        >${body}</div>`;

      return html;
    };

    _content.map(({active, title, body}=section)=>{
      const slug = COMMON.utils.slugify(title)
      this.tabButtons.innerHTML += renderTabButtons(active,slug,title)
      this.tabContent.innerHTML += renderTabContent(active,slug,body)
    })

    this.tabButtons.querySelectorAll('button').forEach((el)=>{
      el.addEventListener('click',(evt)=>{
        evt.preventDefault();

        /** Remove .active from all Buttons & Content */
        this.tabButtons.querySelectorAll( evt.target.parentElement.tagName).forEach((li)=>{
          li.classList.remove('active')
        })
        this.tabContent.querySelectorAll('.tab__content').forEach(content=>{
          content.classList.remove('active')
        })

        /** Add .active to Buttons & Content */
        this.tabContent.querySelector(`#${evt.target.getAttribute('aria-controls')}`).classList.add('active')
        evt.target.parentElement.classList.add('active')
      })
    })

    $(this.tabButtons).on('keydown',(evt)=>{
      
      const $tabs = $(this.tabButtons);
      
      //Handle: Home
      if(evt.keyCode == '9'){
        console.log( evt.target.hash  )
        $(evt.target.hash).focus()
      }
      //Handle: Home
      if(evt.keyCode == '36'){
        $tabs.find('li:first-child a', 'li:first-child').tab('show')
      }
      //Handle: End
      if(evt.keyCode == '35'){
        $tabs.find('li:last-child a','li:last-child').tab('show')
      }
      //Handle: Left Arrow
      if(evt.keyCode == '39'){
        const $nextTab = $(evt.target).parent().next('li');
        $nextTab.find('a').tab('show')
      }
      //Handle: Right Arrow
      if(evt.keyCode == '37'){
        const $prevTab = $(evt.target).parent().prev('li');
        $prevTab.find('a').tab('show')
      }
      
    })

    $(this.tabButtons).on('shown.bs.tab', function (e) {
      $('.show').removeClass('show')
      $('li.nav-item.active').removeClass('active')
      $(e.target).focus();
    })
  }

  /** convert <section /> to Array */
  GetSectionData(sections){
    if( NodeList.prototype.isPrototypeOf(sections) ) {
      let $section = []
      this.querySelectorAll('section').forEach(section=>{
        const $title = section.title||section.querySelector('.tab__title')||'Please provide title'
        const $body =  section.querySelector('.tab__body').innerHTML

        const title = $title.innerText||$title
        const slug = COMMON.utils.slugify(title)
        const active = section.getAttribute('active')==='true'
        const body = $body
      
        section.remove()
        $section.push({title, slug, active, body})
      })
      return $section
    } else {
      return sections
      
    }
  }


  static get observedAttributes() { return ["class"]; }

  attributeChangedCallback(name, oldValue, newValue) {
    // name will always be "country" due to observedAttributes
    this._updateRendering();
  }
  connectedCallback() { this._updateRendering(); }
/*
  get id() { return this._component_id; }
  set id(v) { this.setAttribute("id", v); }
*/


  _updateRendering() {
    // Left as an exercise for the reader. But, you'll probably want to
    // check this.ownerDocument.defaultView to see if we've been
    // inserted into a document with a browsing context, and avoid
    // doing any work if not.
    
  }
}

export default Tabs;