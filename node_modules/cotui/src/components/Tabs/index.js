import '@webcomponents/webcomponentsjs';
import 'document-register-element';
import './resources/style.scss';
import * as COMMON from 'common';

/*
INPUT:
<div is="cotui-accordion">
  <section data-expanded="true">
    <button class="accordion__button" data-type="toggle" aria-controls="js-accordion-UNID">
      A:Personal Information
    </button>
    <div id="js-accordion-UNID">
      <p>content goes here</p>
    </div>
  </section>

  <section id="b-personal-information">
    <span>
      <button data-type="toggle" aria-controls="js-accordion-123456">
        <span class="accordion-title">B:Personal Information<span class="accordion-icon"></span></span>
      </button>
    </span>
    <div id="js-accorion-123456">
      <p>content goes here</p>
    </div>
  </section>
</div>
*/


// Simple JS Element Constructor
const initCustomElement = function({ target, title='Sample Title', sections }={}){
  this.$el = document.querySelectorAll(target)
  const ce = new CustomElement();
        ce.setAttribute('is','cotui-tabs')

        const sEl = document.createElement('div')
        const tabContent = document.createElement('div');
        sections.forEach((section,ndx)=>{
            const slug = COMMON.utils.slugify(section.title)
            const tabItem = document.createElement('div')
                  tabItem.classList.add('tab__item')
                  tabItem.setAttribute('data-target',slug)
                  tabItem.innerHTML = section.title;

            const content = document.createElement('div')
                  content.id = slug;
                  content.innerHTML = section.body;
                  content.classList.add(`tab__content${section.active?'':'--hidden'}`);

            
            if(section.active) ce.setAttribute('data-selected', ndx)      
            sEl.appendChild(tabItem)
            tabContent.appendChild(content)
        })
        ce.appendChild(sEl);

        
  this.$el.forEach((el)=>{  
    el.append(ce);
    Array.from(tabContent.children).map(nodes=>{
      el.append(nodes)
    })
    
  });

  return this.$el
}




class CustomElement extends HTMLElement {
  constructor(){
    super();
    this.selected = this.getAttribute('data-selected')||0
  }
  static get observedAttributes() { return ['data-selected']; }
  attributeChangedCallback(name, oldValue, newValue) { 
    this.activateTabAttribute(oldValue,newValue)
    this.selected = newValue;  
  }

  get selected(){ return this.getAttribute('data-selected') }
  set selected(val) { if(val == this.selected) return; this.setAttribute('data-selected',val)}

  activateTabByIndex(ndx){
    this.selected = ndx;
  }

  activateTabById(id){
    const $tab = this.querySelector(`#${id}`);
    const index = parseInt($tab.getAttribute('aria-labelledby').replace('js-tab__',''));
    this.selected = index;
  }

  activateTabAttribute(prev,next){
    if(prev || next){      
        const $prev = this.querySelector(`#js-tab__${prev}`)
        const $next = this.querySelector(`#js-tab__${next}`)

        let controls;
        
        if($prev){
           controls = $prev.getAttribute('aria-controls');
           $prev.setAttribute('aria-selected','false')
           document.getElementById(controls).classList.remove('tab__content');
           document.getElementById(controls).classList.add('tab__content--hidden');
        }

        if($next){
            controls = $next.getAttribute('aria-controls');
            $next.setAttribute('aria-selected','true')
            document.getElementById(controls).classList.remove('tab__content--hidden');
            document.getElementById(controls).classList.add('tab__content');
            $next.focus()
        }
    }
  }

 
  handleClick(evt){
      const target = evt.target;
      const ndx = target.id.replace(/js-tab__/gi,'')
      this.setAttribute('data-selected', ndx)
  }

  handleKeyDown(evt){
    let current = parseInt(this.getAttribute('data-selected'))
    let total = this.querySelectorAll('.tab__button').length

    switch(evt.keyCode){
        case 39:
          current+=1
        break;
        case 37:
          current-=1
        break;
        case 35:
          console.log('END')
          current = total - 1
        break;
        case 36:
          console.log('HOME')
          current = 0
        break;
    }

    if(current !== total) this.setAttribute('data-selected',current)
    if(current == -1) this.setAttribute('data-selected',total-1)
    if(current == total) this.setAttribute('data-selected',0)
    
  }
    
  handleKeyUp(){}


  connectedCallback(){
    this.setAttribute('role','tablist')
    this.classList.add('tabs')

    Array.from(this.children).forEach(el=>{
        el.classList.add('tabs__controls')
    })

    const selected = parseInt(this.getAttribute('data-selected')) || 0;


    const $tabButtons = this.querySelectorAll('[data-target]')
    $tabButtons.forEach(($tabBtn,ndx)=>{
        const target = $tabBtn.getAttribute('data-target');
        const isActive = ndx == selected
        
    
        const $tabContent = document.querySelector(`#${target}`);
        const $btnContent = $tabBtn.firstChild;

        const $button = document.createElement('button')
              $button.id = `js-tab__${ndx}`
              $button.classList.add('tab__button')
              $button.setAttribute('role','tab')
              $button.setAttribute('aria-controls', target)
              $button.setAttribute('aria-selected', isActive?'true':'false')
              $button.setAttribute('tabindex', isActive?'0':'-1')
              $button.appendChild($btnContent);

              $button.addEventListener('click', this.handleClick.bind(this));
              $button.addEventListener('keydown', this.handleKeyDown.bind(this));
              $button.addEventListener('keyup', this.handleKeyUp.bind(this));

        console.log($tabBtn, $tabContent)
        $tabBtn.removeAttribute('data-target');
        $tabBtn.classList.add('tab__item');
        $tabBtn.insertAdjacentElement('afterbegin',$button);

        if($tabContent){
          $tabContent.classList.add(`tab__content${isActive?'':'--hidden'}`);
          $tabContent.setAttribute('role', 'tabpanel')
          $tabContent.setAttribute('tabindex','0')
          $tabContent.setAttribute('aria-labelledby', $button.id)
        }
    })


    const openSectionId = COMMON.utils.getURLParam('tabs');   
    if(openSectionId && this.querySelector(`#${openSectionId}`)){
      console.log('Tabs Parameter Available', openSectionId)  
      this.activateTabById(`${openSectionId}`);
    }
    
  }

}

customElements.define("cotui-tabs", CustomElement, {extends: 'nav'}) 
export default initCustomElement