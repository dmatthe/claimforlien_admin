import '@webcomponents/webcomponentsjs';
import 'document-register-element';
import './resources/style.scss';
import * as COMMON from 'common';

/*
INPUT:
<div is="cotui-accordion">
  <section data-expanded="true">
    <button class="accordion__button" data-type="toggle" aria-controls="js-accordion-UNID">
      A:Personal Information
    </button>
    <div id="js-accordion-UNID">
      <p>content goes here</p>
    </div>
  </section>

  <section id="b-personal-information">
    <span>
      <button data-type="toggle" aria-controls="js-accordion-123456">
        <span class="accordion-title">B:Personal Information<span class="accordion-icon"></span></span>
      </button>
    </span>
    <div id="js-accorion-123456">
      <p>content goes here</p>
    </div>
  </section>
</div>
*/


// Simple JS Element Constructor


const initCustomElement = function({ target, allowMultiple=false, expandButtonClass, collapseButtonClass, title='', level=3, template, sections, attrs }={}){

  this.$el = typeof(target) === 'string'?document.querySelector(target):target
  const ce = new CustomElement();
        ce.setAttribute('is','cotui-accordion');
        ce.setAttribute('data-title',title)
  let $template;

  if(attrs) attrs.map(attr=>{
    if(typeof(attr) === 'string'){
      ce.setAttribute(attr,'')
    } else {
      for(var obj in attr){
        ce.setAttribute(obj,attr[obj])
      }
    }
    
    //
  });
  if(allowMultiple) ce.allowMultiple = true;
  if(expandButtonClass) ce.buttonExpandClass = expandButtonClass;
  if(collapseButtonClass) ce.buttonCollapseClass = collapseButtonClass;
  if(level) ce.level = level;
  if(template) { 
    if(typeof(template) === 'string'){
      $template = document.querySelector(`${template}`).children[0] 
    }
    if(template.nodeName==='TEMPLATE'){ 
      $template =  document.importNode(template.content, true);
    }
  }

  
  console.log('Using <template/>', $template)
  sections.forEach((section,ndx)=>{
    const slug = section.id||COMMON.utils.slugify(section.title)

    if($template){
      const $tmpl = document.importNode($template, true);

      const $button = $tmpl.querySelector('[aria-controls="{{ID}}"]');
            $button.setAttribute('aria-controls', slug );
            $button.setAttribute('aria-expanded',section.expanded);
            $button.innerText = section.title;

      const $sectionContainer = $tmpl.querySelector('[id="{{ID}}"]')
            $sectionContainer.setAttribute('id', slug )
      
      const $sectionBody = COMMON.utils.getElementByText($tmpl.querySelectorAll('*'),'{{BODY}}')      
            
            
            if(typeof(section.body)==='string') $sectionBody.innerHTML = `<div>${section.body}</div>`;
            if(section.body.nodeName) $sectionBody.appendChild(section.body)

      console.log('<section/>',$tmpl.innerHTML)
      ce.appendChild($tmpl);
    } else{ 
      const sEl = document.createElement('section');
            sEl.id = section.id||`js-accordion__section--${ndx}`;
            sEl.classList.add('accordion__section');

      const sElButton = document.createElement('button');
            sElButton.setAttribute('data-type','toggle');
            sElButton.setAttribute('aria-controls',slug);
            sElButton.innerText = section.title;
            sEl.appendChild(sElButton);

      const sElBody = document.createElement('div')
            sElBody.id = slug;
            if(typeof(section.body)==='string') sElBody.innerHTML = `<div>${section.body}</div>`;
            if(typeof(section.body)!=='string') sElBody.appendChild(section.body);
            sEl.appendChild(sElBody);

      ce.appendChild(sEl);
    }
  });

  this.$el.appendChild(ce);  

  return ce;
}



class CustomElement extends HTMLDivElement {
  constructor(){    
    super();
    this.transitioning = false;
  }
  
  static get observedAttributes() { return ['data-title', 'data-level', 'data-allow-multiple', 'data-button-expand', 'data-button-collapse']; }
  attributeChangedCallback(name, oldValue, newValue) { 
    if(name === 'data-level'){ this.level = newValue }
    if(name === 'data-allow-multiple'){ this.allowMultiple = this.hasAttribute('data-allow-multiple') }
    if(name === 'data-button-expand'){ this.buttonExpandClass = newValue }
    if(name === 'data-button-collapse'){ this.buttonCollapseClass = newValue }
    if(name === 'data-title'){ this.dataTitle = newValue }

    if(oldValue !== newValue && oldValue !== null)
      this._updateComponent();
  }

  get isTransitioning(){ return this.transitioning }
  set isTransitioning(val){ if(val != this.tranisioning) return; this.transitioning = val }

  get isExpanded(){ return this._checkExpanded()==1 }
  set isExpanded(val){ if(val!=this.expanded) return; this.expanded = val }

  get isCollapsed(){ return this._checkExpanded()==-1 }
  set isCollapsed(val){ if(!this.expanded) return; this.expanded = val }

  get allowMultiple(){ return this.hasAttribute('data-allow-multiple'); }
  set allowMultiple(val){ if(val == this.allowMultiple) return; this.setAttribute('data-allow-multiple','');  }

  get buttonExpandClass(){ return this.getAttribute('data-button-expand'); }
  set buttonExpandClass(val){ if(val === this.buttonExpandClass) return; this.setAttribute('data-button-expand', val); }

  get buttonCollapseClass(){ return this.getAttribute('data-button-collapse'); }
  set buttonCollapseClass(val){ if(val === this.buttonCollapseClass) return; this.setAttribute('data-button-collapse', val); }

  get dataTitle(){ return this.getAttribute('data-title'); }
  set dataTitle(val){ if(val === this.dataTitle) return; this.setAttribute('data-title', val); }


  render(){
    const $component = this;
          $component.classList.add('accordion')
          this.transitioning = false;

    if($component.title == null){ console.warn('Missing [title] ', $component);  }

    const $toggle = $component.querySelectorAll('[data-type="toggle"]');
          // Replace <h3 /> with <button />
    const $button = Array.from($toggle).map(toggle=>{
            return COMMON.utils.replaceElement(toggle,'button')
          })

          $button.forEach((btn,ndx)=>{
            const _id = COMMON.utils.generateID();
            if(!btn.hasAttribute('aria-expanded')) btn.setAttribute('aria-expanded',false);
            btn.id = `js-accordion__button--${_id}`;
            btn.type = 'button';
            btn.classList.add('accordion__button');

            

            // Wrap Button in appropriate level
            const $level = document.createElement(`${this.level || this.level > 0?`h${this.level}`:`h3`}`);
                  $level.classList.add('accordion__title');
            btn.parentNode.insertBefore($level,btn);
            $level.appendChild(btn);


            const $target = document.getElementById(`${btn.getAttribute('aria-controls')}`);
            const $section = $target.parentNode;
                  $section.classList.add('accordion__section');

            if($target == null){
              console.warn('Missing <button aria-controls/> and corresponding <div id/> ', btn);
            } else {
              $target.setAttribute('role','region');
              $target.setAttribute('aria-labelledby',btn.id);
              $target.setAttribute('data-height',$target.clientHeight + 20);
              $target.setAttribute('data-index',ndx);

              $target.style.transition = 'max-height 0.25s ease-out'
              $target.classList.add('accordion__wrapper');

              if(btn.getAttribute('aria-expanded')==='false'){
                $target.style.maxHeight = `0px`;
                $target.style.padding = '0px';
                $target.style.display = 'none';
                $target.setAttribute('data-hidden','true');
              } else {
                const padding = $target.style.padding;
                $target.style.maxHeight = `${$target.getAttribute('data-height')}px`
                $target.style.padding = padding;
                $target.setAttribute('data-hidden','false');
              }

              window.addEventListener('resize',function(){
                $target.setAttribute('data-height',$target.scrollHeight + 20);
                $target.style.maxHeight = `${$target.getAttribute('data-height')}px`
                
                this.setTransitioning = true;
                COMMON.utils.delay(250).then(()=>{
                  if(this.setTransitioning)
                  COMMON.utils.delay(250).then(()=>{
                    $target.style.maxHeight = ''
                    this.setTransitioning = false;
                  })
                })
              })

            }
          })


          
          const allowMultiple = this.allowMultiple;
          const allowToggle = true;
          const triggers = [...$component.querySelectorAll('button[data-type="toggle"]')];
          const collapseSectionById = this.collapseSectionById.bind(this);
          const expandSectionById = this.expandSectionById.bind(this);


          $button.forEach(btn=>{
            btn.addEventListener('click', function (event) {
              const $btn = event.currentTarget;
              const target = $btn.getAttribute('aria-controls')
              const $target = document.getElementById(target)

              const isExpanded = $btn.getAttribute('aria-expanded') === 'true'
              const $active = $component.querySelector('[aria-expanded="true"]');

              if(isExpanded){
                collapseSectionById(target)
              } else {
                expandSectionById(target)
              }

              if(!allowMultiple && $active && $active !== $btn){
                //$btn.setAttribute('aria-disabled', 'true');
                const activeTarget = $active.getAttribute('aria-controls')
                collapseSectionById(activeTarget)
              }
              

              event.preventDefault();
            });


            btn.addEventListener('keydown', function (event) {
              var target = event.currentTarget;
              var key = event.which.toString();

              var isExpanded = target.getAttribute('aria-expanded') === 'true';
              var allowToggle = (allowMultiple) ? allowMultiple : $component.hasAttribute('data-toggle');
              
              // 33 = Page Up, 34 = Page Down
              var ctrlModifier = (event.ctrlKey && key.match(/33|34/));
          
              // Is this coming from an accordion header?
              if (target.getAttribute('data-type')==='toggle') {
                // Up/ Down arrow and Control + Page Up/ Page Down keyboard operations
                // 38 = Up, 40 = Down
                if (key.match(/38|40/) || ctrlModifier) {
                  var index = triggers.indexOf(target);
                  var direction = (key.match(/34|40/)) ? 1 : -1;
                  var length = triggers.length;
                  var newIndex = (index + length + direction) % length;
                  
                  triggers[newIndex].focus();
                  event.preventDefault();
                }
                else if (key.match(/35|36/)) {
                  // 35 = End, 36 = Home keyboard operations
                  switch (key) {
                    // Go to first accordion
                    case '36':
                      triggers[0].focus();
                      break;
                      // Go to last accordion
                    case '35':
                      triggers[triggers.length - 1].focus();
                      break;
                  }
                  event.preventDefault();
                }    
              }
            });
          });

    
    //
    if(this.allowMultiple){
      const $toggleButtons = this.querySelectorAll('button[aria-controls]')

      const $controls = document.createElement('div')
            $controls.classList.add('accordion__controls')
            //$controls.setAttribute('role','group')
            //$controls.setAttribute('aria-label',`${this.title?`${this.title} accordion controls`:`accordion controls`}`)

      this.$btnExpand = document.createElement('button')
      this.$btnExpand.setAttribute('aria-pressed',this.isExpanded)
      this.$btnExpand.classList.add('accordion__button--expand')
      this.$btnExpand.type="button"

            if(this.buttonExpandClass){ this.buttonExpandClass.split(/\s/gi).map(className=>{ this.$btnExpand.classList.add(className) }) } 
            this.$btnExpand.innerHTML = `Expand All<span class="sr-only">${this.dataTitle?` ${this.dataTitle} accordion panels`:' accordion panels'}</span>`
            
      this.$btnCollapse = document.createElement('button')
      this.$btnCollapse.setAttribute('aria-pressed',this.isCollapsed)
      this.$btnCollapse.classList.add('accordion__button--collapse')
      this.$btnCollapse.type="button"

            if(this.buttonCollapseClass){ this.buttonCollapseClass.split(/\s/gi).map(className=> this.$btnCollapse.classList.add(className)) }

            this.$btnCollapse.innerHTML = `Collapse All<span class="sr-only">${this.dataTitle?` ${this.dataTitle} accordion panels`:' accordion panels'}</span>`

            this.$btnExpand.addEventListener('click',(evt)=>{
              this.expandAllSections()
              evt.preventDefault()
            })

            this.$btnCollapse.addEventListener('click',(evt)=>{
              this.collapseAllSections()
              evt.preventDefault()
            })
      
      $controls.appendChild(this.$btnExpand)
      $controls.appendChild(this.$btnCollapse)
      this.insertAdjacentElement('afterbegin',$controls)
    }
  }
  connectedCallback() { 
    console.log('Accordion Component Mounted')
    this.render();

    const openSectionId = COMMON.utils.getURLParam('accordion');   
    if(openSectionId && this.querySelector(`#${openSectionId}`)){
      console.log('Expand Section Parameter Available', openSectionId)  
      this.expandSectionById(`${openSectionId}`);
    }
  }


  collapseAllSections(now=false){
    if(this.isTransitioning) return;
    this.isTransitioning = true;
    console.log('CollapseAllSections',now)


    const $toggleButtons = this.querySelectorAll('button[aria-controls]')
    $toggleButtons.forEach($btn=>{
      $btn.setAttribute('aria-expanded','false')

      const $target = document.getElementById($btn.getAttribute('aria-controls'))
            $target.setAttribute('data-hidden', 'true');
            
      $target.style.maxHeight = `${$target.getAttribute('data-height')}px`
      COMMON.utils.delay(25).then(()=>{
        $target.style.maxHeight = `0px`
        
        if(now){
          $target.style.display = 'none'
          this.isTransitioning = false;
        } else {
          setTimeout(function() {
            $target.style.display = 'none'
            this.isTransitioning = false
          }, 250);
        }
      })

    })

    this._checkExpanded();
    this.dispatchEvent(new Event('hide-accordion-section'))
  }

  

  collapseSectionById(id,now=false){
    if(this.isTransitioning) return;
    this.isTransitioning = true;
    console.log('CollapseSectionById', this.isTransitioning, id, now)

    id = `'${id}'`
    const $toggleButtons = this.querySelectorAll(`[aria-controls=${id}]`).length > 0?this.querySelectorAll(`[aria-controls=${id}]`):this.querySelectorAll('button[aria-controls]')
    $toggleButtons.forEach($btn=>{
      $btn.setAttribute('aria-expanded','false')

      const $target = document.getElementById($btn.getAttribute('aria-controls'))
            $target.setAttribute('data-hidden', 'true');

            $target.style.maxHeight = `${$target.getAttribute('data-height')}px`

            COMMON.utils.delay(25).then(()=>{
              $target.style.maxHeight = `0px`
              
              if(now){
                $target.style.display = 'none'
                this.isTransitioning = false;
              } else {
                setTimeout(function() {
                  $target.style.display = 'none'
                  this.isTransitioning = false
                }, 250);
              }
            })
    })

    this._checkExpanded();
    this.dispatchEvent(new Event('hide-accordion-section'))
  }

  expandAllSections(now=false){
    if(this.isTransitioning) return;
    this.isTransitioning = true;

    const $toggleButtons = this.querySelectorAll('button[aria-controls]')
    $toggleButtons.forEach($btn=>{
      $btn.setAttribute('aria-expanded','true')

      const $target = document.getElementById($btn.getAttribute('aria-controls'))
            $target.setAttribute('data-hidden', 'false');
            $target.style.display = "block"
            
      console.log('ExpandAllSections', now)
      $target.setAttribute('data-height',$target.scrollHeight + 20);

      if(now){
        $target.style.maxHeight = `${$target.getAttribute('data-height')}px`
      } else {

        setTimeout(function() {
          $target.style.maxHeight = `${$target.getAttribute('data-height')}px`

          COMMON.utils.delay(250).then(()=>{
            $target.style.maxHeight = ''
            this.isTransitioning = false;
          })
        }, 25);
      }
    
    })

    this._checkExpanded();
    this.dispatchEvent(new Event('show-accordion-section'))
  }

  expandSectionById(id,now=false){
    if(this.isTransitioning) return;
    this.isTransitioning = true;
    console.log('ExpandSectionById', id, now)

    id = `'${id}'`
    const $toggleButtons = this.querySelectorAll(`[aria-controls=${id}]`)

    $toggleButtons.forEach($btn=>{
      $btn.setAttribute('aria-expanded','true')
      
      const $target = document.getElementById($btn.getAttribute('aria-controls'))
            $target.setAttribute('data-hidden', 'false');
            $target.style.display = "block"

      $target.setAttribute('data-height',$target.scrollHeight + 20);
      if(now){
        $target.style.maxHeight = `${$target.getAttribute('data-height')}px`
        this.isTransitioning = false;
      } else {
        setTimeout(function() {
          $target.style.maxHeight = `${$target.getAttribute('data-height')}px`
          COMMON.utils.delay(250).then(()=>{
            $target.style.maxHeight = '';
            this.isTransitioning = false;
          })
        }, 25);
      }


      // AUTO SCROLL when TOGGLE enabled: https://itdjira.csd.toronto.ca/browse/DTSCUI-34
      if(!this.allowMultiple && !now){
        const ndx = parseInt($target.getAttribute('data-index'));
        const pos = this.offsetTop + ($btn.getBoundingClientRect().height * ndx);
        window.scrollTo({ top: pos, behavior: 'smooth' });
      }
      
    })

    this._checkExpanded();
    this.dispatchEvent(new Event('show-accordion-section'))
  }




  _checkExpanded(){
    const sections = Array.from(this.querySelectorAll('button[data-type="toggle"]'))
    const test = sections.filter((section)=>{ return section.getAttribute('aria-expanded')==='true' })
    
    if(test.length > 0 && test.length < sections.length ){
      console.log('Some Open Some Closed' , test); 
      if(this.$btnCollapse && this.$btnCollapse){
        this.$btnExpand.setAttribute('aria-pressed','false')
        this.$btnCollapse.setAttribute('aria-pressed','false') 
      }
      return 0;
    } 

    if(test.length == 0) {
      console.log('All Closed');
      if(this.$btnCollapse && this.$btnCollapse){
        this.$btnExpand.setAttribute('aria-pressed','false')
        this.$btnCollapse.setAttribute('aria-pressed','true')
      }
      return -1;
    }
   
    if(test.length == sections.length){
      console.log('All Open')
      if(this.$btnCollapse && this.$btnCollapse){
        this.$btnExpand.setAttribute('aria-pressed','true')
        this.$btnCollapse.setAttribute('aria-pressed','false') 
      }
      return 1;
    }
    
  }


  _updateComponent(){
    console.log('----------------------','Update Component','----------------------')
    console.log(this)
  }

}


customElements.define("cotui-accordion", CustomElement, {extends: 'div'}) 
export default initCustomElement