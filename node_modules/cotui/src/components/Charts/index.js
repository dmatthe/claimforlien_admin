import 'leaflet';
import 'esri-leaflet';
import 'chart.js';
import Color from 'color'

import * as d3 from 'd3';
import './resources/style.scss';
import AddressLookup from './Address';
import ChartData from './ChartData';
import * as COMMON from 'common';

const Charts = function({ target, type, showControls}={}){
    this.name = 'cotui-charts'
    let $el = document.querySelectorAll(target)
      
    const isEnabled = customElements.get(this.name)?true:customElements.define(this.name, CustomElementComponent)
    $el.forEach(el=>{    
        let charts = new CustomElementComponent()
            charts.setAttribute('chart-type',type);
            el.appendChild(charts)
    })
  }
  
  Charts.prototype.initCustomElement = () =>{ 
    const enabled = customElements.get('cotui-charts')
    if(!enabled){ customElements.define('cotui-charts', CustomElementComponent) }
  }; 



class CustomElementComponent extends HTMLElement{
    constructor({target}={}, initDOM){
        const self = super();
        this.classList.add('chart');
        this.component_id = `${COMMON.utils.generateID()}`;
        this.$data = {}
        
        return self;
    }

    static get observedAttributes() { return ['chart-type','chart-title','x-axislabel','y-axislabel', 'x-axislabel-hide','y-axislabel-hide'] }

    attributeChangedCallback(name, oldValue, newValue) {
        if(name === 'chart-type') { this._type = newValue }
        if(name === 'chart-title') { this._chartTitle = newValue }
        if(name === 'x-axislabel') { this._xAxisLabel = newValue }
        if(name === 'y-axislabel') { this._yAxisLabel = newValue }
        if(name === 'x-axislabel-hide') { this._hideXAxisLabel = newValue }
        if(name === 'y-axislabel-hide') { this._hideYAxisLabel = newValue }

        if(oldValue) this.updateComponent();
    }
    set _type(val){ if (this.type === val) return; this.type = val   }
    get _type(){ return this.type }

    set _chartTitle(val){ if (this.chartTitle === val) return; this.chartTitle = val; }
    get _chartTitle(){ return this.chartTitle;  }

    set _xAxisLabel(val){ if (this.xAxisLabel === val) return; this.xAxisLabel = val; }
    get _xAxisLabel(){ return this.xAxisLabel;  }

    set _yAxisLabel(val){ if (this.yAxisLabel === val) return; this.yAxisLabel = val; }
    get _yAxisLabel(){ return this.yAxisLabel;  }

    set _hideXAxisLabel(val){ if (this.hideYAxisLabel === val) return; this.hideYAxisLabel = val; }
    get _hideXAxisLabel(){ return this.hideYAxisLabel; }

    set _hideYAxisLabel(val){ if (this.hideYAxisLabel === val) return; this.hideYAxisLabel = val; }
    get _hideYAxisLabel(){ return this.hideYAxisLabel; }

    

    init(){
        console.log('Initialized', this)
        let type = this.getAttribute('chart-type')
        let id = `js-${type}__${this.component_id}`
        this.$component = document.createElement('div')
        this.$component.classList.add(`chart--${type}`)
        this.$component.setAttribute('id',id)   
        this.appendChild(this.$component)

        this.$tooltip = this.ChartToolTip();
        
    }

    updateComponent(){
        console.log('Update Component', this.type)
        if(this.$component){
            this.removeChild(this.$component)
            this.init()
        }
        switch(this.type){
            case 'map': 
                this.MapChart(); 
                break;
            case 'line':
            case 'bar':
            case 'horizontalBar':
            case 'stackedBar':
            case 'radar':
            case 'pie':
            case 'doughnut':
            case 'polarArea':
            case 'bubble':
            case 'scatter': 
                this.ChartJS(this.type); 
                break;
            case 'controls': this.ChartControls(); break;
        }
    }

    connectedCallback() {
        this.init();
        this.updateComponent()
    }

    ColorRange({givenColor='#ec9f09', colorsAmount=4}={}){
        let colors = []
        let mixColor = '#ffffff'
        let rotate = Math.floor(Math.random() * 180) + 45  
        let colorsShiftAmount = 3
        let saturation = 0.1
        for (let step = 0; step < colorsAmount; step++) {
            const c = Color(givenColor).rotate((step + 1) / colorsAmount * -rotate).saturate((step + 1) / colorsAmount * (saturation / 100)).mix(Color(mixColor), (colorsShiftAmount / 100) * (step + 1) / colorsAmount)
            colors.push(c.hex())
        }
        return colors;
    }

    ChartToolTip(){
        const $tooltip = (function(){
            const $dom = document.querySelector('.chart__popup')
            if($dom){
                return $dom;
            } else {
                const tooltipDOM = document.createElement('div');
                tooltipDOM.classList.add('chart__popup');
                document.body.appendChild(tooltipDOM);
                return tooltipDOM
            }
        })()

        $tooltip.hide = function(){ this.style.display = 'none' }
        $tooltip.show = function(){ this.style.display = 'block' }



        $tooltip.innerHTML = '<div class="panel panel-default"><div class="panel-heading">THIS IS THE DATA</div></div>'
        return $tooltip;
    }

    ChartControls(){        
        const target = document.querySelector(`#${this.getAttribute('aria-controls')}`)
        const targetID = this.getAttribute('aria-controls');
        console.log('Target',target)
        let html = '';
        if(target.type === 'map'){
            const data = target.$data
            const datasets = data.chartData.datasets
            const labels = data.chartData.labels;

            datasets.map((dataset)=>{
                const title = dataset.label;
                html += `<label><input class="map__input--set" type="checkbox" value="${title}" checked="checked"> ${title}</label><br />`
            })

            html += `<label for="${this.id}--select"></label>`
            html += `<select id="${this.id}--select}" class="map__input--data">`
            labels.map((label,ndx)=>{
                const title = label;
                html += `<option value="${ndx}">${title}</option>`
            })
            html += '</select>'

        }
        
        this.innerHTML = html;
        let mapInputData = document.querySelectorAll('.map__input--data')
            mapInputData.forEach(input=>{
                input.addEventListener('change', function(evt){
                    const target = document.querySelector(`#${targetID}`)
                    target.querySelectorAll(`[class*="layer__"]`).forEach((el)=>{
                        if(parseInt(evt.target.value) === 0){
                            el.classList.remove('hide')
                        } else {
                            el.classList.add('hide')
                        }  
                    })

                    if(parseInt(evt.target.value) !== 0){
                        target.querySelectorAll(`[class*="layer__${evt.target.value}--id"]`).forEach((el)=>{
                            el.classList.remove('hide')
                        })
                    }

                })
            })


        let mapInputSet = document.querySelectorAll('.map__input--set')
            mapInputSet.forEach(input=>{
                input.addEventListener('click', function(evt){
                    const target = document.querySelector(`#${targetID}`)
                    target.querySelectorAll(`[class*="layer__${evt.target.value}"]`).forEach((el)=>{
                        if(!evt.target.checked){
                            el.classList.add('hide')
                        } else {
                            el.classList.remove('hide')
                        }
                    })

                })
            })
        
    }



    ChartJS(type){
        console.log('ChartJS')
        const data = new ChartData();
        const fontSize = 16/(141/32);
        const canvas = document.createElement('canvas')
        canvas.setAttribute('height','400')
        canvas.setAttribute('width', '400')
        this.$component.appendChild(canvas)

        
        
        let options = {}    
        /*
            console.log(this.ColorRange({givenColor:'#165788', colorsAmount: 141}).map(c=>{
                return `"${c}"`
            }).join(','));

            const backgroundColor = this.ColorRange({givenColor:'#165788', colorsAmount: 141})
            Chart.defaults.global.elements.line.backgroundColor = backgroundColor;
            Chart.defaults.global.elements.point.backgroundColor = backgroundColor;
            Chart.defaults.global.elements.rectangle.backgroundColor = backgroundColor;
            Chart.defaults.global.elements.arc.backgroundColor = backgroundColor;
        */

        

        if(this.type){
            var dataSetIndex;
            options = {
                responsive: true,
                cutoutPercentage: 50,
                legend:{
                    display: !type.match(/(pie)|(doughnut)/),
                },
				title: {
					display: true,
					text: this.chartTitle||'REQUIRED'
				},
                tooltips: {
                    mode: 'point',
                    enabled: false,
                    intersect: false,
                    custom:function(model){                      
                      var $tooltip = document.querySelector('.chart__popup');
                      

                      if (model.opacity === 0) {
                        $tooltip.hide();
                      } else {
                        $tooltip.show();
                      }

                      if(model){
                        const title = (function(){
                            if( type.match(/(pie|doughnut)/gi)){ 

                                return model.hasOwnProperty('body')?model.body.map(b=>{
                                    return b.lines.map(l=>{return l}).join('')
                                }).join(''):null
                            } else{
                                return model.hasOwnProperty('title')?model.title.map(t=>{return t}).join(''):null;
                            }
                        })()
                        if(title){
                            $tooltip.innerHTML = `
                                <div class="panel panel-default">
                                    <div class="panel-body">${title}</div>
                                    <div class="panel-footer">${data.chartData.labels[dataSetIndex]}</div>
                                </div>
                            `
                        } 
                     }
 
                    canvas.addEventListener('mousemove',(e)=>{
                        var pos = [e.pageX,e.pageY]
                        $tooltip.style.left = `${pos[0]}px`;
                        $tooltip.style.top = `${pos[1]}px`
                    })

                    
                    canvas.addEventListener('mouseout',(e)=>{
                        $tooltip.hide()
                    })
                        
                      /*
                      var pos = [e.pageX - (popupWidth/2),e.pageY]
                    //var left = position.left + pos[0] - window.pageXOffset - (popupWidth/2)
                    if(pos[0] < 0){ 
                        //left += (popupWidth/2)
                        pos[0] += (popupWidth/2)
                    }
        
                    if((pos[0]+popupWidth) > windowWidth){ 
                        //left -= (popupWidth/2)
                        pos[0] -= (popupWidth/2)
                    }
        
                    tooltipEl.css('top', pos[1] + (-popupHeight) - 20 + 'px')
                    tooltipEl.css('left', pos[0] + 'px')
                    */


                    }
                },
				hover: {
					mode: 'nearest',
					intersect: true
                },
				scales: {
					xAxes: [{
                        display: !type.match(/(pie)|(doughnut)/),
                        stacked: !type.match(/(stackedBar)/),
                        ticks: {
                            display: this.hideXAxisLabel||true,
                            beginAtZero: true,
                        },
						scaleLabel: {
							display: true,
							labelString: this.xAxisLabel||'REQUIRED'
						}
					}],
					yAxes: [{
                        display: !type.match(/(pie)|(doughnut)/),
                        ticks: {
                            display: this.hideYAxisLabel||true,
                            beginAtZero: true,
                        },
						scaleLabel: {
							display: true,
							labelString: this.yAxisLabel||'REQUIRED'
						}
					}]
				}
			}        
        }
        
        Object.assign(options,data.chartOptions)     
        for(var obj in data.chartDefaults){ Object.assign(Chart.defaults[obj],data.chartDefaults[obj]) }
       

        const ctx = canvas.getContext('2d');
        this.$chart = new Chart(ctx, {
            type: type==='stackedBar'?'bar':type,
            data: data.chartData,
            options: options,
            plugins: [{
               /*Adjust axis labelling font size according to chart size */
               afterLayout: function(c) {
                  var chartWidth = c.chart.width;
                  var size = fontSize + (chartWidth / 100);
      
                  if(size > fontSize){
                   size = fontSize;
                  }
                  c.scales['y-axis-0'].options.ticks.minor.fontSize = size;
                  c.scales['x-axis-0'].options.ticks.minor.fontSize = size;
              }
            }]
          });
    }

    MapChart(){
        const data = new ChartData();
        const address = new AddressLookup();
        const geojsonFeature = address.getLayer('./resources/cot_neighbourhoods.json');
        
        
        const $menu = document.createElement('div');
        const $input = document.createElement('input');
        const $list = document.createElement('div');

        $menu.appendChild($input);
        $menu.appendChild($list);

        $input.style.width = '100%';
        $list.style.overflow = 'auto';
        const listHeight = parseInt(this.$component.getClientRects()[0].height) - 25;
        $list.style.height = `${listHeight}px`;
        $list.innerHTML = `
            <ul>
                ${
                    data.chartData.labels.map(label=>{
                    return `<li>${label}</li>`
                    }).join('')
                }
            </ul>        
        `
                           
        this.$component.style.width = '70%';
        this.$component.insertAdjacentElement('afterend',$menu);
        
        $menu.style.width = '30%';

        const map = L.map(this.$component.id).setView([43.66, -79.373903], 10);
                    L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
                        maxZoom: 18,
                        attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
                            '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
                            'Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
                        id: 'mapbox.streets'
                    }).addTo(map);

        let datasets = data.chartData.datasets
        let labels = []
        let layerGroup = {}
        let colorGrade = [];
        let colorRange;
        let colorDomain;

        this.$layers = layerGroup
        //this.$data = data
        //this.$component = map

        // Setup FeatureGroups based on dataset
        datasets.map(data=>{
            layerGroup[data.label] = L.layerGroup()
        })

        

        geojsonFeature.then(features=>{
            let colorTempGrades = []
            let colorRanges = []
            datasets.map(dataset=>{
                const c = dataset.backgroundColor;
                const domain = dataset.data
                const range = c//this.ColorRange({givenColor:'#165788', colorsAmount: domain.length})
                const color = d3.scaleQuantile().domain(domain).range(range)
                
                colorRange = color;
                L.geoJSON(features,{
                    onEachFeature: function(feature,layer){
                        
                        const featIndex = parseInt(feature.properties.AREA_SHORT_CODE);
                        const featLabel = dataset.label;
                        const featTitle = data.chartData.labels[featIndex];
                        const layerColor = color(dataset.data[featIndex]);
                        const id = `${featLabel}_${featIndex}`;
                        const $tooltip = document.querySelector('.chart__popup');
                        
                        colorTempGrades.push(layerColor);
                        layer.feature.properties.ChartLayerID = id
                        layer.feature.properties.ChartTitle = featTitle 
                        layer.setStyle({
                            className: `layer__${COMMON.utils.slugify(featLabel)} layer__${id}--id `,
                            stroke: false,
                            color: layerColor,
                            fillOpacity: 1
                        })

                        layer.on({
                            mouseover: function(e){
                                $tooltip.show();
                                var pos = [e.originalEvent.clientX,e.originalEvent.clientY];
                                $tooltip.style.left = `${pos[0]}px`;
                                $tooltip.style.top = `${pos[1]}px`;
                                
                                $tooltip.innerHTML = `
                                    <div class="panel panel-default">
                                        <div class="panel-body"><strong>${dataset.label}</strong>:${dataset.data[featIndex]}</div>
                                        <div class="panel-footer">${e.target.feature.properties.AREA_NAME}</div>
                                    </div>
                                `

                                if(data.chartOptions.onHover) data.chartOptions.onHover()
                            },
                            mouseout: function(e){
                                $tooltip.hide();
                                if(data.chartOptions.onMouseOut) data.chartOptions.onMouseOut()
                            },
                            click: data.chartOptions.onClick||function(){}
                        });

                        layerGroup[featLabel].addLayer(layer);
                    }
                })
            })

            
            colorGrade = [...new Set(colorTempGrades)]; 
            return layerGroup
        }).then(layer=>{
            let bounds;
            
            for (var i in layer) {
                if (layer.hasOwnProperty(i)) {
                    layer[i].addTo(map)
                    //bounds = layer[i].getBounds()
                    //console.log(i,layer[i])              
                }
            }
            L.control.layers(null,layer).addTo(map)
            L.control.scale().addTo(map);

            var legend = L.control({position: 'bottomright'});
                legend.onAdd = function (map) {

                    var div = L.DomUtil.create('div', 'info legend'),
                        grades = [0, 4,6,8,10,12,14,16,18,20],
                        labels = [];

                    /*
                    colorRange.range().map(hex=>{
                        console.log(hex, colorRange.invertExtent(hex) )
                    })
                    */
                    // loop through our density intervals and generate a label with a colored square for each interval
                    for (var i = 0; i < grades.length; i++) {
                        div.innerHTML +=
                            '<i style="background:' + colorRange(grades[i]) + '"></i> ' +
                            grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');
                    }
                    return div;
                };

                legend.addTo(map);

        })
    }

    Charts(){
        return `
            <div cotui id="js-charts__${this.component_id}" >
                <div class="jumbotron">
                    <h1 class="display-4">${this.title} Component</h1>
                    <p>This is a sample</p>
                    <p class="lead">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus urna est, condimentum eget blandit ac, ultrices sit amet orci. Quisque eleifend mi non nisl ornare accumsan. Curabitur mi tellus, pellentesque ac eros in, placerat tincidunt lorem. Aliquam eget leo a ligula porta ornare. Aenean at nunc ac dolor aliquam sodales. Ut ante ex, congue finibus orci eu, rhoncus sagittis erat. Curabitur quis sem aliquet, commodo metus hendrerit, maximus lorem. Nam sit amet lacinia arcu. In pellentesque dictum lorem. Nam posuere lacus quis dignissim sagittis. Vivamus consequat luctus nisl sed finibus. Mauris non lacinia enim. Mauris luctus nisi vitae eros pharetra semper. Suspendisse pharetra vehicula ultricies. Phasellus at neque nisi. Fusce id nulla sit amet lacus consectetur rutrum ac quis felis.</p>
                </div>
            </div>
        `
    }
}


export default Charts
