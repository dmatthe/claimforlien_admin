import '@webcomponents/webcomponentsjs';
import './resources/style.scss';

import * as COMMON from 'common';

/**
 * Initialize COTUI.Autosuggest
 * @property {string} options                
 * @property {string} options.target        - initialize components contained in the target.
 * @property {string} options.type          - '', addressLookup'
 * @property {object} callback               
 * @property {function} callback.onSubmit   - Extend onSubmit method
 * @property {function} callback.onSelected  - Extend onResults method
 * 
 * @return {object} _view
 * @listens results
 * @listens submit
 * @listens selected
 * 
*/


/*
<cotui-suggest
    label="Find Address or Intersection (cotgeocoder)"
    limit="10"
    icon="fas fa-map-marker-alt"
    button="Lookup"
    type="api"
    query=""

    data-api.attr-value="KEYSTRING"
    data-api.attr-text="ADDRESS"
    data-api.attr-array="result.rows"
    data-api.url="https://map.toronto.ca/cotgeocoder/rest/geocoder/suggest?f=json&addressOnly=0&retRowLimit=100&searchString={QUERY}"

    on-selected="handleSelected"
    on-results="handleResults"
    on-submit="handleSubmit">
</cotui-suggest>
*/

const SuggestCE = function({ target }={}){
    this.$el = document.querySelectorAll(target)
  
    const tab = new CustomElementAutoSuggest();
          tab.setAttribute('cotui','')
          this.$el.forEach((el)=>{ el.appendChild(tab) })
  }
  
  
  
  class CustomElementAutoSuggest extends HTMLElement {
      
    constructor() {
      super();
    }
    static get observedAttributes() { return ['query']; }
    static get query(){ return this.getAttribute('query') }
    static set query(val){ val?this.setAttribute('query', val):this.removeAttribute('query') }
    

    attributeChangedCallback(name, oldValue, newValue) {
        if(name === 'query') {
            this.query = newValue;
            this.handleSearch();
        }
    }

    $emit(name,data){ this.dispatchEvent( new CustomEvent(name,{detail:data})) }


    handleResults(evt){  console.log('results', evt); evt.preventDefault(); }
    handleBlur(evt){  console.log('Blur', evt); evt.preventDefault(); }
    handleChange(evt){ console.log('Change', evt); evt.preventDefault(); }
    handleKeypressed(evt){ 
        
        var $li = '';
        var prevSelectedIndex = this.selectedIndex
    
        switch(evt.keyCode){
            case 40:
                if( (this.data.length > 0) && (this.selectedIndex < this.data.length-1) ){
                  this.selectedIndex++;
                  this.selected = this.data[this.selectedIndex].text;
                }
            break;

            case 38:
                if( (this.selectedIndex > -1) && (this.data.length > 0) && (this.selectedIndex > 0) ){
                  this.selectedIndex--;
                  this.selected = this.data[this.selectedIndex].text
                }
            break;

            case 13:
                this.handleSelect(this.selectedIndex)
                this.querySelector(`#${this.id}__result--${this.selectedIndex}`).classList.remove('active')
            break;

            default:
                this.selected = {}
                this.selectedIndex = -1
                this.setAttribute('query',evt.target.value)
            break;
        }
    
        if(this.selectedIndex >= 0 && this.data.length > 0) {
            this.querySelector(`#${this.id}__result--${this.selectedIndex}`).classList.add('active')

            if(prevSelectedIndex > -1)
            this.querySelector(`#${this.id}__result--${prevSelectedIndex}`).classList.remove('active')
        }

        evt.preventDefault()
    }

    handleSelect(ndx){ 
        this.setAttribute('query','')
        var input = this.querySelector(`#${this.id}__input`)
        input.value = this.data[ndx].text
        input.setAttribute('data-value', this.data[ndx].value)
        COMMON.utils.updateAriaLive(`${this.data[ndx].text} selected`)

        console.log('Handle Selected', input)
    }
    handleClear(evt){ 
        var input = this.querySelector(`#${this.id}__input`)
        input.value = ''
        input.setAttribute('data-value', '')
        COMMON.utils.updateAriaLive(``)

        console.log('Clear', input) 
        evt.preventDefault();
    }
    handleSearch(){
        const type = this.type;
        const query = this.query;
        const searchIntersection = this.excludeIntersection?1:0;
        const maxResults = this.maxResults
        const dataApi = this.dataApi;
        
        const promise = new Promise((resolve,reject)=>{
          
          /*
           * API Search
           */
          if( type === 'api'){
            const apiRequest = COMMON.utils.getJSON(dataApi.url.replace(/(\{QUERY\})/gi,query)).then(function(api){
              var apiResult = []
              const get = (p, o) => p.reduce((xs, x) => (xs && xs[x]) ? xs[x] : null ,o)
              const dataSrcPath = get( dataApi.path.split('\.'), api )
              const dataLabel = dataApi.text;

              if(dataSrcPath){
                dataSrcPath.map((res,ndx)=>{
                  if(apiResult.length < maxResults)
                  apiResult.push({text:res[dataApi.text], value:res[dataApi.value], data: dataApi.includeAll?res:''})
                })
              }
              return apiResult
            })
            resolve(apiRequest)
          }

          /*
           * SEARCH JSON.OBJECT|JSON.FILE 
           */
          if(type=='json'){
            var jsonResults = []
            if(typeof(dataApi.url) == 'string'){
              this.data = COMMON.utils.getJSON(dataApi.url);
            } else {
              this.data = dataApi.url
            }

            const id = '';
            const keys = dataApi.text.split(',');
            const Fuse = require('fuse.js');
            const options = { 
              shouldSort: true,
              matchAllTokens: true,
              threshold: 0.1,
              location: 0,
              distance: 100,
              maxPatternLength: 32,
              minMatchCharLength: 1,
              keys, 
              id 
            }
            
            if(query != ''){
              const search = new Fuse(this.data,options).search(query)
              search.map((res)=>{
                jsonResults.push({
                  text: res[dataApi.value],
                  value:res[dataApi.value],
                  data:res
                })
              })
              resolve(jsonResults)
            }

          }

          

          /*
           * Use Built-in Search Method
           */
          if(type ==='default'){
            var filterResults =[];
            var builtInResults = [];

            const regex = new RegExp(`${query}`,'gi');
            filterResults = this.data.filter(term=>{
              if('value' in term){
                return term.text.match(regex);
              } else {
                term.value = term.text;
                return term.text.match(regex);
              }
            });

            filterResults.map((term,ndx)=>{
              if(ndx < maxResults){
                builtInResults.push(term)
              }
            })
            resolve(builtInResults)
          }



          /*
           * Use Custom Search Method
           * must pass object ({query:'', data:[]})
           * must return []
           */
          if(type==='custom'){
            var customResults = []
            if(this.onSearch) {
              if(typeof(this.onSearch) === 'string'){
                const strFunc = new Function("return " + this.onSearch)();
                customResults = strFunc({text:this.query})
              } else{
                customResults = this.onSearch({text:this.query})
              }
            }
            resolve(customResults)
          }          
        })

        /*
         *  Custom results handler
         */
        promise.then((res)=>{
          if(this.onResults) {
            if(typeof(this.onResults) === 'string'){
              const strFunc = new Function("return " + this.onResults)();
              strFunc({text:this.query, result:res})
            } else{
              this.onResults({text:this.query, result:res})
            }
          }

          this.$emit('onResults', res)
        })

        /*
         *  Update ARIA
         */
        promise.then((res)=>{
          if(res.length > 0){
            COMMON.utils.updateAriaLive(`${res.length} items contain ${this.query}. The first item is ${res[0].text}. The last item is${res[res.length-1].text}`)
          }
        })

        this.$emit('onSearch', promise)
        return promise
      }


    connectedCallback() {
        this.id = `js-suggest__${COMMON.utils.generateID()}`

        
        console.log(this)
        this.label = this.getAttribute('label')
        this.buttonLabel = this.getAttribute('button')
        this.type = this.getAttribute('type')
        this.query = this.getAttribute('query')
        this.isExpanded = this.getAttribute('isExpanded')

        this.dataApi = {
            url:this.getAttribute('data-api.url'),
            value:this.getAttribute('data-api.attr-value'),
            text:this.getAttribute('data-api.attr-text'),
            path:this.getAttribute('data-api.attr-array'),
            includeAll:false
        }

        this.onResults = this.getAttribute('onResults')
        this.onSelect = this.getAttribute('onSelect')
        this.onSubmit = this.getAttribute('onSubmit')


        console.log(this.onResults);
        console.log(this.onSelect);
        console.log(this.onSubmit);

        this.data = [];
        this.results = [];
        this.selected = [];
        this.selectedIndex = 0;
        this.maxResults = 7
      
        
        
        
        this.addEventListener('onResults',(res)=>{
            this.data = res.detail 
            if(!this.onResults){
              this._renderResults();
            } else {
              this.onResults(this.data);
            }
          })
        /*
        this.addEventListener('onSearch',(res)=>{ this.data = res.detail })
        this.addEventListener('onSubmit',(res)=>{ this.data = res.detail })
        */ 
        this.render()

        var input = this.querySelector(`#${this.id}__input`)
            input.addEventListener('keyup', (evt)=>this.handleKeypressed(evt))
            input.addEventListener('blur',(evt)=>this.handleBlur(evt))
            input.addEventListener('change',(evt)=>this.handleChange(evt))
        
        var clearbtn = this.querySelector(`#${this.id}__button--clear`)
            clearbtn.addEventListener('click',(evt)=>this.handleClear(evt))

        var submitButton = this.querySelector(`#${this.id}__button--submit`)
     }

  
    _renderResults() {
      // Left as an exercise for the reader. But, you'll probably want to
      // check this.ownerDocument.defaultView to see if we've been
      // inserted into a document with a browsing context, and avoid
      // doing any work if not.
      let $container = this.querySelector(`#${this.id}__results`)
      $container.innerHTML = '';

      let $el = document.createElement('ul');
        this.data.map((result, ndx)=>{
            let item = document.createElement('li')
            item.setAttribute('role','option')
            item.setAttribute('class', 'typeahead__result list-group-item')
            item.setAttribute('id', `${this.id}__result--${ndx}`)
            item.setAttribute('aria-selected', `false`)
            item.setAttribute('data-id', `${result.value}`)
            item.setAttribute('data-ndx', `${ndx}`)
            item.innerHTML = `<i class="icon"></i> ${result.text}`
            item.addEventListener('click',(evt)=>{
                this.handleSelect(evt.target.dataset.ndx)
                evt.preventDefault();
            })
            $el.appendChild(item)
        })
      $container.appendChild($el)
    }
    

    render(){
        var template = `
            <div class="typeahead" cotui>
                <label id="${this.id}__label" for="${this.id}__input" class="typeahead__label">${this.label}</label>
                <div class="typeahead__wrapper">
                    <div role="combobox"
                        aria-expanded="${this._isExpanded}"
                        aria-owns="typeahead__results"
                        aria-haspopup="listbox"
                        id="${this.id}__combobox"
                        class="input-group input-group-lg"
                        >
                        <input type="text"
                            autocomplete="off"
                            aria-autocomplete="off"
                            aria-controls="typeahead__results"
                            aria-labelledby="${this.id}__label"
                            class="typeahead__input form-control"
                            data-value="${this._queryID}"
                            list="${this.id}__results"
                            id="${this.id}__input">
                        <div class="input-group-append">
                        <button
                            class="button--clear btn btn-defaut"
                            id="${this.id}__button--clear"
                            tabindex="0"
                            role="button"
                            type="button"
                            aria-label="Clear textbox">
                            <i class="fas fa-times-circle"></i>
                        </button>
                        <button class="btn btn-primary"
                            id="${this.id}__button--submit"
                            type="button"
                            >
                            ${this.buttonLabel}
                        </button>
                    </div>
                    </div>
                    <div id="${this.id}__results"></div>
                </div>
            </div>        
        `
        this.innerHTML = template
    }
}


export default SuggestCE
customElements.define('cotui-suggest', CustomElementAutoSuggest);
