const path = require('path');
const webpack = require('webpack');
const CleanWebpackPlugin = require('clean-webpack-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const UglifyJsPlugin = require("uglifyjs-webpack-plugin");
const OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin');

const glob = require('glob');

const { VueLoaderPlugin } = require('vue-loader')


GetAllComponents = (fn)=>{
  let components = []
  let partials = glob.sync(`./src/components/**/${fn}`);
  const entryObject = partials.reduce((acc, item) => {
    const regex_str = `^(\.\/src\/components\/)|(\/${fn})$`
    const regex = new RegExp(regex_str,'gi');
    const name = item.replace(regex,'')
    components.push(name)
  }, {});

  return components
}


GenerateExamplePages = (env)=>{
  var fn = 'index.partial.html'
  const components = [];
  partials = glob.sync(`./src/components/**/${fn}`);
  const entryObject = partials.reduce((acc, item) => {
    const regex_str = `^(\.\/src\/components\/)|(\/${fn})$`
    const regex = new RegExp(regex_str,'gi');
    const name = item.replace(regex,'')
    components.push(name)
  }, {});

  let directory = components;
  let obj = directory.map(function(entryName,ndx) {
    entryPath = `./src/components/${entryName}/${fn}`
    return new HtmlWebpackPlugin({  
      // Also generate a test.html
      filename: `./examples/${entryName}.html`,
      //template: `./src/component.example.template.hbs`,
      template: entryPath,
      excludeChunks:['cotui'],
      minify: env.production
    })
  })

  return obj;
}

module.exports = (env) => {

  console.log('---------------------',env,'----------------------')
  return {
    entry:{
      'cotui':['@babel/polyfill/noConflict','./src/app.js'],
      'cotui.min':['@babel/polyfill/noConflict','./src/app.js']
    },
    devtool: 'inline-source-map',
    devServer: {
      host: 'j2md0104268.wkstn.toronto.ca',
      //host: 'localhost',
      //host: '0.0.0.0',
      contentBase: path.join(__dirname, 'dist'),
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, PATCH, OPTIONS",
        "Access-Control-Allow-Headers": "X-Requested-With, content-type, Authorization"
      },
      //useLocalIp: true,
      disableHostCheck: true,
      compress: true,
      //noInfo: false,
      port: 8008,
    },
    mode: env.NODE_ENV,
    watch: !env.production,
    output: {
      filename: '[name].js',//env.production?'[name].js':'cotui.js',
      path: path.resolve(__dirname, 'dist'),
      library: ['COTUI'],
      libraryExport: "default"
    },
    optimization: {
      minimize: env.production,
      minimizer: [
        new UglifyJsPlugin({
          cache: true,
          parallel: true,
          include: /\.min\.js$/,
          sourceMap: !env.production, // set to true if you want JS source maps
          uglifyOptions:{
            compress: {
              drop_console: env.production,
              unused: env.production,
            }
          }
        }),
        new OptimizeCssAssetsPlugin({})
      ]
    },
    module: {
        rules: [{
            test: /\.(sc|c)ss$/,
            use: [
                MiniCssExtractPlugin.loader, // creates style nodes from JS strings
                'css-loader', // translates CSS into CommonJS
                'sass-loader',// compiles Sass to CSS, using Node Sass by default
                {
                  loader: 'postcss-loader', // Run post css actions
                  options: {
                    plugins: function () { // post css plugins, can be exported to postcss.config.js
                      return [
                        //require('precss'),
                        require('autoprefixer')
                      ];
                    }
                  }
                }, // Run postcss actions
            ]
          },{
            test: /\.(js)$/,
            exclude: /(node_modules)/,
            use: {
              loader: 'babel-loader',
              options:{
                "presets": [
                  ["@babel/preset-env",{ "modules": false } ]
                ],
                "plugins": ["@babel/plugin-transform-object-assign"]
              }
            }
          },{
            test: /\.(png|jpg|gif|svg|eot|ttf|woff|woff2)$/,
            loader: 'url-loader',
            options: {
              limit: 10000
            }
          },{
            test: /\.(woff|woff2|eot|ttf|otf)$/,
            use: 'file-loader'
          },{
            test: /\.vue$/,
            exclude: /node_modules/,
            use: 'vue-loader'
          },{
            test: /\.hbs$/,
            use: {
              loader:'handlebars-loader',
              options:{}
            }
        }]
    },
    externals:{

    },
    resolve: {
        alias: {
          '@webcomponents/webcomponentsjs': '@webcomponents/webcomponentsjs',
          'document-register-element':'document-register-element',
          'jquery': 'jquery',
          'axios': 'axios',
          //'bootstrap': 'bootstrap',
          'vue$': 'vue/dist/vue.esm.js',
          'common$': path.resolve(__dirname, 'src/components/common/index.js')
        },
        extensions: ['*', '.js', '.vue', '.json']
    },
    plugins : [
          new VueLoaderPlugin(),
          new CleanWebpackPlugin(['dist','docs']),
          new MiniCssExtractPlugin({
              //filename: env.production?'cotui.min.css':'cotui.css',
              chunkFilename: '[name].css',
          }),
          new OptimizeCssAssetsPlugin({
            assetNameRegExp: /\.optimize\.css$/g,
            cssProcessor: require('cssnano'),
            cssProcessorPluginOptions: {
              preset: ['default', { discardComments: { removeAll: true } }],
            },
            canPrint: true
          }),
          new HtmlWebpackPlugin({
              hash: true,
              components: function(){
                return GetAllComponents('index.partial.html')
              },
              template: './src/index.hbs',
              path: path.join(__dirname, "dist"),
              filename: './index.html',
              minify: env.production,
              excludeChunks: ['cotui']
          }),
          new webpack.ProvidePlugin({}),
          new webpack.DefinePlugin({
              'process.env':{
                'API_GEOSERVICES': JSON.stringify('//map.toronto.ca/geoservices/rest')
              }
            }),
        ].concat(GenerateExamplePages(env))
  }
};
