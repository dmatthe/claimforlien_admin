#!/usr/bin/env node



/* 

FORCE INITAL CAPS

*/

const inquirer = require("inquirer");
const chalk = require("chalk");
const figlet = require("figlet");
const shell = require("shelljs");

const fs = require('fs-extra')
const path = require('path');

const dir = path.resolve();


const init = () => {
  console.log(
    chalk.green(
      figlet.textSync("COTUI", {
        font: "colossal",
        horizontalLayout: "default",
        verticalLayout: "default"
      })
    )
  );
};

const askQuestions = () => {
  const questions = [
    {
      name: "NAME",
      type: "input",
      message: "Component name"
    },{
      name: "EXTENSION",
      type: "list",
      message: "Component type",
      choices: [".vue", ".js",'.ce',".docs"],
      filter: function(val) {
        return val.split(".")[1];
      }
    }
  ];
  return inquirer.prompt(questions);
};

const createFile = (filename, extension) => {
  const filePath = `${process.cwd()}/${filename}.${extension}`
  shell.touch(filePath);
  return filePath;
};

const success = (msg) => {
  console.log(
    chalk.green.bold(msg)
  );
};

const fail = (msg) => {
  console.log(
    chalk.red(msg)
  );
};


const run = async () => {
  // show script introduction
  init();

  // ask questions
  const answers = await askQuestions();
  const { FILENAME, NAME, EXTENSION } = answers;
  if(NAME===''){
    console.log(
      chalk.red(`Please provide a name for the component`)
    );
    return false
  }

  function UpdateFiles(path){
    const replace = '___COMPONENTNAME____'
    const text = NAME

    fs.readdir(path).then((fn)=>{ 
      fn.map(file=>{
        const target = path + '/' +file
        const fileInfo = fs.lstatSync( target ) 

        if(fileInfo.isDirectory())
          UpdateFiles(`${dir}/src/components/${NAME}/${file}`)

        if(fileInfo.isFile())
          fs.readFile(target, 'utf8', function (err,data) {
            if (err) { return console.log(err);  }

            normalRepl = replace
            lowerRepl = replace.toLowerCase()

            var regexNormal = new RegExp(`${normalRepl}`,'g')
            var regexLower = new RegExp(`${lowerRepl}`,'g')

            temp = data.replace(regexNormal, text);
            result = temp.replace(regexLower, text.toLowerCase());
            
            new Promise(function(resolve, reject) {
              fs.writeFile(target, result, 'utf8', function (err) {
                if (err) return console.log(err); 
                if(target.match('(HelloComponent)')){
                  targetComponentName = target.replace(/(HelloComponent)/gi,NAME)
                  fs.rename(target,targetComponentName)
                }
                resolve(target)
              })
            }).then(res=>{})
            
          })
      })

    })
  }


  

  fs.exists(`${dir}/src/components/${NAME}`).then((exists)=>{
    
    if(!exists){
      if(!exists && EXTENSION === 'vue'){
        fs.copy(`${dir}/.componentTemplate/HelloVue`,`${dir}/src/components/${NAME}`)
          .then(() => { UpdateFiles(`${dir}/src/components/${NAME}`) })
      }
  
      if(!exists && EXTENSION === 'js'){  
        fs.copy(`${dir}/.componentTemplate/HelloJavascript`,`${dir}/src/components/${NAME}`)
          .then(() => { UpdateFiles(`${dir}/src/components/${NAME}`) })
      }


      if(!exists && EXTENSION === 'ce'){  
        fs.copy(`${dir}/.componentTemplate/HelloCustomElement`,`${dir}/src/components/${NAME}`)
          .then(() => { UpdateFiles(`${dir}/src/components/${NAME}`) })
      }
  
      success(`Done! Component created: ${dir}/src/components/${NAME}`);
      console.log( chalk.white(`Remember to register your component ${dir}/src/components/index.js`))
      console.log( chalk.white(`Then start developing ${dir}/npm start`))
    } else {
      fail(`Component name exists try a different name`);
    }
  
  })

  fs.exists(`${dir}/src/stories/Components/${NAME}`).then((exists)=>{
    if(!exists && EXTENSION === 'docs'){    
      fs.copy(`${dir}/.componentTemplate/HelloStorybook`,`${dir}/src/stories/Components/${NAME}`)
        .then((res) => { 
          UpdateFiles(`${dir}/src/stories/Components/${NAME}`) 
        })

      success(`Done! Component documentaion created: ${dir}/src/stories/Components/${NAME}`);
    } 
  })
  
};

run();