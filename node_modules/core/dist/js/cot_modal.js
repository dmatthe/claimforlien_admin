"use strict";

/*
Using modal dialogs is a common design pattern with core apps. This helper does most of the work for you, including AODA compliance.

If includeModal is set to true in your project's package.json coreConfig, then this file will be included.
The method below is a static method of the cot_app (if your app is standalone) or CotApp (if your app is embedded) class.
Use it like this:

CotApp.showModal({title:'My Title', body: 'My Body'}); //embedded apps

cot_app.showModal({title:'My Title', body: 'My Body'}); //standalone apps

 */
$(function () {
  (window['cot_app'] || window['CotApp']).showModal = function (o) {
    /*
    If you have any apps that load content into a modal popup dynamically, read this comment:
    In a previous app, the content of the modal was inserted dynamically in the modal shown.bs.modal javascript event.
    It turns out that on iOS 9 or later, this prevents the user from being able to scroll down the screen.
    See this bug: https://github.com/twbs/bootstrap/issues/17695
    A solution looks something like this:
    $('#myModal').on('shown.bs.modal', function(){
      $('#myModal').css('overflow-y','hidden');
      //...
      //do some code to retrieve and insert dynamic content into .modal-body
      //...
      //after modal content is all there:
      $('#myModal').css('overflow-y','â€‹auto');
    })
    This fixed the bug.
     */
    var id = 'modal_' + Math.random().toString().split('.')[1]; // add a bootstrap class to button

    var returnButton = function returnButton(bsType, opt) {
      if (opt && opt.hasOwnProperty('bootstrapType')) {
        var bsTypes = ['primary', 'success', 'info', 'warning', 'danger'];

        if (bsTypes.indexOf(opt.bootstrapType) == -1) {
          opt.bootstrapType = 'default';
        }
      }

      switch (bsType) {
        case 'cancel':
          return '<button class="btn btn-' + opt.bootstrapType + '" type="button" data-dismiss="modal">' + opt.label + '</button>';
          break;

        case 'confirm':
          return '<button class="btn btn-' + opt.bootstrapType + ' js-confirm_' + id + '" type="button">' + opt.label + '</button>';
          break;

        default:
          return '<button class="btn btn-default" type="button" data-dismiss="modal">Close</button>';
      }
    };

    function a11yClick(event) {
      if (event.type === 'click') {
        return true;
      } else if (event.type === 'keyup') {
        var code = event.charCode || event.keyCode;

        if (code === 32 || code === 13) {
          return true;
        }
      } else {
        return false;
      }
    }

    var options = $.extend({
      preset: false,
      // false | 'confirm' | alert
      title: '',
      //An HTML string. The title of the modal
      body: '',
      //An HTML string. The body of the modal
      bootstrapType: 'default',
      // primary | success | info | warning | danger
      footerButtonsHtml: returnButton(),
      //Optional, if unset the modal will have a single Close button. To use, specify an HTML string to render one or more buttons
      modalSize: '',
      //Optional, set to modal-lg or modal-sm to use modal size classes
      originatingElement: null,
      //Optional, an element (DOM or $-selected) to set focus to after the modal is closed, use for accessibility
      className: '',
      //Optional, a CSS class to put on the root div.modal element
      onShow: o['onShow'] || function () {},
      //Optional, hook into boostrap modal events
      onShown: o['onShown'] || function () {},
      onHide: o['onHide'] || function () {},
      onHidden: o['onHidden'] || function () {},
      buttons: {
        cancel: {
          label: '<i class="glyphicon glyphicon-remove"></i> Cancel',
          bootstrapType: 'default'
        },
        confirm: {
          label: '<i class="glyphicon glyphicon-ok"></i> Confirm',
          bootstrapType: 'primary'
        }
      },
      callback: function callback() {}
    }, o); // You must set originatingElement to focus back after modal close

    if (options.originatingElement === null) {
      console.error('originatingElement is required');
      return false;
    }

    var template = ''; // build template regarding preset

    switch (options.preset) {
      case 'alert':
        template = '<div class="modal fade alert-' + options.bootstrapType + ' ' + options.className + '" id="' + id + '" tabindex="-1" role="dialog" aria-label="Alert" aria-hidden="true" aria-modal="true" aria-describedby="' + id + '_body">' + '    <div class="modal-dialog ' + options.modalSize + '">' + '      <div class="modal-content">' + '        <div id="' + id + '_body" class="modal-body" >' + options.body + '</div>' + '        <div class="modal-footer">' + returnButton() + '        </div>' + '      </div>' + '    </div>' + '  </div>';
        break;

      case 'confirm':
        template = '<div class="modal fade ' + options.className + '" id="' + id + '" tabindex="-1" role="dialog" aria-labelledby="' + id + '_title" aria-hidden="true" aria-modal="true">' + '    <div class="modal-dialog ' + options.modalSize + '">' + '      <div class="modal-content">' + '        <div class="modal-header">' + '          <button type="button" aria-label="Close" class="close" type="button" data-dismiss="modal">' + '            <span aria-hidden="true">&times;</span>' + '          </button>' + '          <div role="heading" aria-level="2" id="' + id + '_title" class="modal-title">' + options.title + '</div>' + '        </div>' + '        <div id="' + id + '_body" class="modal-body">' + options.body + '</div>' + '        <div class="modal-footer">' + returnButton('cancel', {
          bootstrapType: options.buttons.cancel.bootstrapType,
          label: options.buttons.cancel.label
        }) + ' ' + returnButton('confirm', {
          bootstrapType: options.buttons.confirm.bootstrapType,
          label: options.buttons.confirm.label
        });
        '        </div>' + '      </div>' + '    </div>' + '  </div>';

        if (typeof options.callback == 'function') {
          $('body').delegate('.js-confirm_' + id, 'click keyup', function (event) {
            if (a11yClick(event) === true) {
              options.callback();
              $('#' + id).modal('hide');
            }
          });
        }

        break;

      default:
        template = '<div class="modal fade ' + options.className + '" id="' + id + '" tabindex="-1" role="dialog" aria-labelledby="' + id + '_title" aria-hidden="true" aria-modal="true">' + '    <div class="modal-dialog ' + options.modalSize + '">' + '      <div class="modal-content">' + '        <div class="modal-header">' + '          <button type="button" aria-label="Close" class="close" type="button" data-dismiss="modal">' + '            <span aria-hidden="true">&times;</span>' + '          </button>' + '          <div role="heading" aria-level="2" id="' + id + '_title" class="modal-title">' + options.title + '</div>' + '        </div>' + '        <div id="' + id + '_body" class="modal-body">' + options.body + '</div>' + '        <div class="modal-footer">' + options.footerButtonsHtml + '        </div>' + '      </div>' + '    </div>' + '  </div>';
    }

    $('body').append(template);
    var modalElement = $("#" + id);
    var headerCloseButton = modalElement.find('.modal-header button').first();
    var footerCloseButton = modalElement.find('.modal-footer button').last();
    modalElement.modal({
      show: false
    }).on('show.bs.modal', function () {
      options.onShow();
    }).on('shown.bs.modal', function () {
      (headerCloseButton.length != 0 ? headerCloseButton : footerCloseButton).focus();
      options.onShown();
    }).on('hide.bs.modal', function () {
      options.onHide();
    }).on('hidden.bs.modal', function () {
      options.onHidden();
      options.originatingElement.focus();
      modalElement.remove();
    }).modal('show').attr('aria-hidden', false);
    headerCloseButton.on('keydown', function (e) {
      if ((e.which || e.keyCode) === 9 && e.shiftKey) {
        footerCloseButton.focus();
        return false;
      }
    });
    footerCloseButton.on('keydown', function (e) {
      if ((e.which || e.keyCode) === 9 && !e.shiftKey) {
        headerCloseButton.focus();
        return false;
      }
    });
    return modalElement;
  };
});