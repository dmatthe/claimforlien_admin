"use strict";

/*
Using the multiselect plugin (outside of CotForm usage) has some AODA-related pitfalls. This helper method solves those issues.

If includeMultiSelect is set to true in your project's package.json coreConfig, then this file will be included.
The method below is a static method of the cot_app (if your app is standalone) or CotApp (if your app is embedded) class.

 */
$(function () {
  (window['cot_app'] || window['CotApp']).addMultiselect = function (o) {
    var options = $.extend({
      $select: '',
      //Required. The select element to make into a multiselect, as a jquery element
      ariaLabelledBy: '',
      //Required. The ID to use for the aria-labelledby property of the field
      ariaDescribedBy: '',
      //Optional. The ID(s) to use for the aria-describedby property of the field
      ariaRequired: false,
      //Optional. The value to use for the aria-required field
      multiselectOptions: {} //Optional. a set of options to use when creating the multiselect. see http://davidstutz.github.io/bootstrap-multiselect/#configuration-options

    }, o);

    var ods = options.multiselectOptions['onDropdownShown'] || function () {},
        odh = options.multiselectOptions['onDropdownHidden'] || function () {},
        oc = options.multiselectOptions['onChange'] || function () {};

    options.$select.multiselect($.extend(options.multiselectOptions, {
      onDropdownShown: function onDropdownShown() {
        var parent = options.$select.parent().find('.btn-group');
        parent.find('button').attr('aria-expanded', true);
        var firstChecked = parent.find('ul li.active a');

        if (firstChecked.length === 0) {
          firstChecked = parent.find('ul li a');
        }

        firstChecked.first().focus();
        ods();
      },
      onDropdownHidden: function onDropdownHidden() {
        options.$select.parent().find('.btn-group button').attr('aria-expanded', false);
        odh();
      },
      onChange: function onChange(option, selected) {
        if (selected && !options.$select[0].multiple) {
          options.$select.parent().find('.btn-group button').focus();
        }

        oc(option, selected);
      }
    }));
    var $ms = options.$select.parent().find('.btn-group');
    var listId = 'ms_popup_list_' + Math.random().toString().split('.')[1];
    $ms.find('button').attr({
      'id': options.$select.attr('id') + '_btn',
      'aria-controls': listId,
      'aria-expanded': 'false',
      'aria-haspopup': 'listbox',
      'aria-labelledby': options.$select.attr('id') + '_label' + ' ' + options.$select.attr('id') + '_btn',
      // options.ariaLabelledBy,
      'aria-describedby': options.ariaDescribedBy
    }).css("width", "100%").css("text-align", "left");
    setTimeout(function () {
      var btnGroup = $ms.find('button').parent();
      var icon = btnGroup.prev();
      console.log(icon);

      if (icon.length > 0) {
        btnGroup.insertBefore(icon);
      }
    }, 300);
    var liID = 1;
    $ms.find('ul').attr({
      'id': listId,
      'aria-labelledby': options.$select.attr('id') + '_label',
      //options.ariaLabelledBy || o.$select.attr('id'),
      'aria-describedby': options.ariaDescribedBy || o.$select.attr('id'),
      'tabindex': '0',
      'role': 'listbox',
      'aria-multiselectable': true,
      'aria-activedescendant': '',
      'aria-required': options.ariaRequired
    }) // .css('width','auto')
    .find('li').each(function () {
      $(this).attr('id', listId + '_' + liID++);
    }).attr({
      'role': 'option',
      'aria-selected': false
    }).find('a').attr({
      'role': 'presentation'
    }).find('label').css("color", "#333"); // .find('input').attr({
    //   // 'aria-describedby': options.ariaDescribedBy
    // });
  };
});