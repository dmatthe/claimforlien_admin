var cot_login = function(options) {
  this.options = $.extend(
    {
      appName: '', //Required, the name of your app, this will be sent to the CC AuthSession API call to login
      ccRoot: '', //Optional, defaults to '' (the current protocol and domain will be used), use this to specify the <protocol>:://<domain> to use for the CC AuthSession API call
      ccPath: '', //Optional, when specified, this overrides the ccApiPath option of CotSession
      ccEndpoint: '', //Optional, when specified, this overrides the ccApiEndpoint option of CotSession
      welcomeSelector: '', //Optional, a jquery selector string for the element where the login/logout information should be displayed
      loginMessage: '', //Optional, an HTML string to display on the login form, this can be used to explain to the user why they are logging in
      onLogin: function(cot_login_instance) {
        //Optional, a function that will be called after the user logs in successfully
      }
    },
    options || {}
  );

  if (!this.options['appName']) {
    throw new Error('Error: the appName option is required');
  }

  this.session = new CotSession({
    appName: this.options['appName'],
    ccApiOrigin: this.options['ccRoot'] || undefined,
    ccApiPath: this.options['ccPath'] || undefined,
    ccApiEndpoint: this.options['ccEndpoint'] || undefined
  });

  this._setUserName();
};

cot_login.prototype.showLogin = function() {
  var that = this;
  this.modal = cot_app.showModal({
    title: 'User Login',
    body:
      this.options.loginMessage +
      '<form class="cot-form loginForm">' +
      '<div tabindex="-1" id="loginhelp_combination" style="display:none" class="alert alert-danger"></div>'+
      '<div class="form-group username-group">' +
      '<label for="cot_login_username" class="control-label"><span>Username</span></label>' +
      '<div class="entryField"><input class="form-control required" id="cot_login_username" aria-required="true"><i class="form-control-feedback glyphicon glyphicon-remove" data-fv-icon-for="username" aria-hidden="true" style="display: none;"></i></div>' +
      '<div id="loginhelp_username" class="fv-err-msg" style="display:none"><small class="help-block">Username is required and cannot be left blank</small></div>'+
      '</div>' +
      '<div class="form-group password-group">' +
      '<label for="cot_login_password" class="control-label"><span>Password</span></label>'+
      '<div class="entryField"><input class="form-control required" type="password" id="cot_login_password" aria-required="true"><i class="form-control-feedback glyphicon glyphicon-remove" data-fv-icon-for="password" aria-hidden="true" style="display: none;"></i></div>' +
      '<div id="loginhelp_password" style="display:none" class="fv-err-msg"><small class="help-block">Password is required and cannot be left blank</small></div>'+
      '</div>' +
      '</form>',
    footerButtonsHtml:
      '<button class="btn btn-primary btn-cot-login">Login</button>'+'<button class="btn btn-default" data-dismiss="modal">Cancel</button>' ,
    originatingElement: $(this.options['welcomeSelector']).find('a.login'),
    className: 'cot-login-modal',
    onShown: function() {
      that.modal.find('.btn-cot-login').click(function() {
        that._login();
      });

      that.modal.find('.modal-body input').keydown(function(e) {
        if ((e.charCode || e.keyCode || 0) === 13) {
          that._login();
        }
      });
    }
  });
};

cot_login.prototype.isLoggedIn = function() {
  return this.session.isLoggedIn();
};

cot_login.prototype.logout = function() {
  this.session.logout();
  this._setUserName();
  window.location.reload();
};

cot_login.prototype._setUserName = function() {
  this._loadSessionFields();
  var that = this;

  var $el = $(this.options['welcomeSelector']);
  $el.find('div.welcomemsg').remove();

  if (this.isLoggedIn()) {
    // User is logged in - display login name
    $el.html(
      "<div class='welcomemsg'><b>User Name</b>: " +
        this.username +
        " (<a class='logout' href='#'>Logout</a>)</div>"
    );
    $el.find('a.logout').on('click', function() {
      that.logout();
      return false;
    });
    // Call the success callback function that is called when a user is logged
    this.options['onLogin'](this);
  } else {
    // User is not logged in - display login link
    $el.html(
      "<div class='welcomemsg'><a class='login' href='#'>Login</a></div>"
    );
    $el.find('a.login').on('click', function() {
      that.showLogin();
      return false;
    });
  }
};

cot_login.prototype._login = function() {

  var that = this;
  var usernameInputField = $('#cot_login_username');
  var passwordInputField = $('#cot_login_password');
  var username = usernameInputField.val();
  var password = passwordInputField.val();

  // reset the form status
  $.each($('.username-group, .password-group'),function(){
    var thisField = $(this);
    thisField.removeClass('has-error');
    thisField.find('.form-control-feedback').css('display','none').removeClass('glyphicon-ok').removeClass('glyphicon-error')
    $('#loginhelp_username, #loginhelp_password, #loginhelp_combination').css('display','none')
    usernameInputField.removeAttr('aria-describedby')
    passwordInputField.removeAttr('aria-describedby')
    usernameInputField.removeAttr('aria-invalid')
    passwordInputField.removeAttr('aria-invalid')
  })

  if (!username) {
    usernameInputField.focus()
    $('.username-group').addClass('has-error');
    $('.username-group').find('.form-control-feedback').css('display','block').addClass('glyphicon-remove').addClass('glyphicon-error')
    $('#loginhelp_username').css('display','block')
    usernameInputField.attr('aria-describedby','loginhelp_username')
    usernameInputField.attr('aria-invalid','true')
  }
  else{
    $('.username-group').addClass('has-success');  $('.username-group').find('.form-control-feedback').css('display','block').removeClass('glyphicon-remove').addClass('glyphicon-ok')
  }
  if (!password) {
    passwordInputField.focus();
    $('.password-group').addClass('has-error');
    $('.password-group').find('.form-control-feedback').css('display','block').addClass('glyphicon-remove').addClass('glyphicon-error')
    $('#loginhelp_password').css('display','block')
    passwordInputField.attr('aria-describedby','loginhelp_password')
    passwordInputField.attr('aria-invalid','true');
  }
  else{
    $('.password-group').addClass('has-success');  $('.password-group').find('.form-control-feedback').css('display','block').removeClass('glyphicon-remove').addClass('glyphicon-ok')
  }

  if(!password && !username){
    usernameInputField.focus();
  }

  if(!password||!username){
    return false
  }

  this.modal.find('.btn').prop('disabled', true).eq(0).html('Working...');

  this.session.login({
    username: username,
    password: password,
    success: function() {
      that._setUserName();
      that.modal.modal('hide');
    },
    error: function(jqXHR, textStatus, error) {
      console.log(
        'POST Request Failed: ' + textStatus + ', ' + error,
        arguments
      );
      if (error === 'invalid_user_or_pwd') {
        that._displayLoginError("Invalid username or password.", false);
        usernameInputField.attr('aria-invalid','true');
        passwordInputField.attr('aria-invalid','true');
      } else {
        that._displayLoginError('Unable to log in. Please try again.');
      }
      $('#loginhelp_combination').focus();
    },
    always: function() {
      that.modal
        .find('.btn')
        .removeAttr('disabled')
        .removeClass('disabled')
        .eq(0).html('Login');
    }
  });
};

cot_login.prototype._loadSessionFields = function() {
  var that = this;
  [
    'sid',
    'username',
    'email',
    'firstName',
    'lastName',
    'division',
    'groups'
  ].forEach(function(fld) {
    that[fld] = that.session[fld];
  });
};

cot_login.prototype._displayLoginError = function(message, restform) {
  if (restform) {
    $('#cot_login_username').val('');
    $('#cot_login_password').val('');
  }
  $.each($('.username-group, .password-group'),function(){
    var thisField = $(this);
    thisField.addClass('has-error');
    thisField.find('.form-control-feedback').css('display','block').addClass('glyphicon-remove').addClass('glyphicon-error');
    $('#loginhelp_username,#loginhelp_password').css('display','none')
    $('#loginhelp_combination').css('display','block')
    $('#loginhelp_combination').html('<p>'+ message +'</p>')
  })
};

var CotSession = function(options) {
  this.options = $.extend(
    {
      appName: '', //Required, the name of your app, this will be sent to the CC AuthSession API call to login
      ccApiOrigin: '', //By default, login happens on the same origin as the current page. You could override this with, for example, https://was-inter-sit.toronto.ca
      ccApiPath: '/cc_sr_admin_v1/', //If needed, you could use a different API path
      ccApiEndpoint: 'session'
    },
    options || {}
  );

  if (!this.options['appName']) {
    throw new Error('Error: the appName option is required');
  }
  this._loadSessionFromCookie();
};
CotSession.LOGIN_CHECK_RESULT_TRUE = 1;
CotSession.LOGIN_CHECK_RESULT_FALSE = 2;
CotSession.LOGIN_CHECK_RESULT_INDETERMINATE = 3;
CotSession.prototype.isLoggedIn = function(serverCheckCallback) {
  //specify serverCheckCallback as a callback function if you want to test the session on the server
  //serverCheckCallback will receive an argument equal to one of the following:
  // CotSession.LOGIN_CHECK_RESULT_TRUE //the user's session is still valid
  // CotSession.LOGIN_CHECK_RESULT_FALSE //the user's session is not valid
  // CotSession.LOGIN_CHECK_RESULT_INDETERMINATE //the user's session could not be tested due to server or network issues

  //if serverCheckCallback is not specified, only the local cookie is checked
  if (!serverCheckCallback) {
    if (this._cookie('sid')) {
      return true;
    } else {
      this.logout();
      return false;
    }
  } else {
    var sid = this.sid || this._cookie('sid');
    if (!sid) {
      serverCheckCallback(CotSession.LOGIN_CHECK_RESULT_FALSE);
    } else {
      var url =
        this.options.ccApiOrigin +
        this.options.ccApiPath +
        this.options.ccApiEndpoint +
        '/' +
        sid;
      var that = this;
      $.get(url, function(data) {
        var app = data['app'] || '',
          rsid = data['sid'] || '',
          error = data['error'] || '';
        if (app === that.options.appName && rsid === sid) {
          that._storeLogin(data);
          serverCheckCallback(CotSession.LOGIN_CHECK_RESULT_TRUE);
        } else if (error === 'no_such_session') {
          that.logout();
          serverCheckCallback(CotSession.LOGIN_CHECK_RESULT_FALSE);
        } else {
          serverCheckCallback(CotSession.LOGIN_CHECK_RESULT_INDETERMINATE);
        }
      }).fail(function(jqXHR, textStatus, error) {
        console.log(
          'Unable to test session. jqXHR:',
          jqXHR,
          'textStatus:',
          textStatus,
          'error:',
          error
        );
        serverCheckCallback(CotSession.LOGIN_CHECK_RESULT_INDETERMINATE);
      });
    }
  }
};

CotSession.prototype.login = function(options) {
  options = $.extend(
    {
      username: '', //the username to login with
      password: '', //the password to login with
      success: function() {}, //a function to call after a successful login
      error: function(jqXHR, textStatus, error) {}, //a function to call after an unsuccessful login
      always: function() {} //a function to always call after the whole login attempt is complete
    },
    options || {}
  );

  var url =
    this.options.ccApiOrigin +
    this.options.ccApiPath +
    this.options.ccApiEndpoint +
    '?app=' +
    this.options.appName;
  var payload = {
    user: options.username,
    pwd: options.password
  };
  var that = this;
  $.post(url, payload, function(data) {
    if (data['error']) {
      options.error(
        null,
        data.error === 'invalid_user_or_pwd'
          ? 'Invalid username or password'
          : 'Login failed',
        data.error
      );
    } else if (data['passwordIsExpired']) {
      options.error(null, 'Expired password', 'passwordIsExpired');
    } else {
      that._storeLogin(data);
      options.success();
    }
  })
    .fail(function(jqXHR, textStatus, error) {
      options.error(jqXHR, textStatus, error);
    })
    .always(function() {
      options.always();
    });
};

CotSession.prototype.logout = function() {
  this._removeCookie('sid');
  this._removeCookie('cot_uname');
  this._removeCookie('email');
  this._removeCookie('firstName');
  this._removeCookie('lastName');
  this._removeCookie('division');
  this._removeCookie('groups');
  this._loadSessionFromCookie();
};

CotSession.prototype.extend = function(minutes) {
  //set how long the current session cookies should last before expiring, in minutes
  //if omitted, the session will be set to expire in the default 30 minutes
  //returns true if the session cookie expiry times were updated, false if not (because there is no session data)

  //NOTE: not entirely sure what should happen if the current session cookies are expired...
  if (this.sid) {
    this._storeLogin({
      sessionCookieExpiryDate: minutes
        ? new Date().getTime() + minutes * 60 * 1000
        : null,
      sid: this.sid,
      userID: this.username || '',
      email: this.email || '',
      cotUser: {
        firstName: this.firstName || '',
        lastName: this.lastName || '',
        division: this.division || '',
        groupMemberships: this.groups || ''
      }
    });
    return true;
  }
  return false;
};

CotSession.prototype._loadSessionFromCookie = function() {
  this.sid = this._cookie('sid') || '';
  this.username = this._cookie('cot_uname') || '';
  this.email = this._cookie('email') || '';
  this.firstName = this._cookie('firstName') || '';
  this.lastName = this._cookie('lastName') || '';
  this.division = this._cookie('division') || '';
  this.groups = this._cookie('groups') || '';
};

CotSession.prototype._storeLogin = function(data) {
  var date = new Date();
  if (data['sessionCookieExpiryDate']) {
    date.setTime(data['sessionCookieExpiryDate']);
  } else {
    date.setTime(date.getTime() + 30 * 60 * 1000);
  }
  this._cookie('sid', data.sid, { expires: date });
  this._cookie('cot_uname', data['userID'], { expires: date });
  this._cookie('email', (data['email'] || '').toLowerCase(), { expires: date });
  if (data['cotUser']) {
    this._cookie('firstName', data['cotUser']['firstName'], { expires: date });
    this._cookie('lastName', data['cotUser']['lastName'], { expires: date });
    this._cookie('division', data['cotUser']['division'], { expires: date });
    this._cookie('groups', data['cotUser']['groupMemberships'], {
      expires: date
    });
  }
  this._loadSessionFromCookie();
};

CotSession.prototype._cookie = function(key, value, options) {
  if (key) {
    key = encodeURIComponent(this.options.appName) + '.' + key;
  }
  return $.cookie(key, value, options);
};

CotSession.prototype._removeCookie = function(s) {
  return $.removeCookie(encodeURIComponent(this.options.appName) + '.' + s);
};